global proc shelf_EGC_ExportFBX () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "User Script" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "ExportFBX" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "exportSmoothSkin.png" 
        -image1 "exportSmoothSkin.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import pymel.core as pm\nimport re,os\nDefaultPath = 'D:\\\\bake\\\\low\\\\'\n\ndef ExecuteExport(yourPath):\n    #add FBX into newArray and avoid FBXs export to one FBX\n    FBXarray = []\n    _des_path = ''\n    for i in pm.selected():\n        if i.getShape().nodeType() == 'mesh':   # just get mesh\n            FBXarray.append(i)\n    pm.select(clear=True)\n\n    #Set FBX configs\n    pm.other.FBXResetExport()\n    pm.other.FBXExportSmoothingGroups('-v', True)\n    pm.other.FBXExportLights('-v', False)\n    pm.other.FBXExportTriangulate('-v', False)\n    pm.other.FBXExportSmoothMesh('-v', False)\n    pm.other.FBXExportTangents('-v',False)\n    pm.other.FBXExportFileVersion('-v', 'FBX201300')\n    FBXAddress = []\n    for x in FBXarray:\n        meshname = x.name()\n        if re.search(':', meshname) != None: # Check FBX name contain ':'\n            meshname = re.sub(':', '',meshname)\n        if re.search('|', meshname) != None:\n            meshname = re.sub('|', '',meshname)\n        _des_path = yourPath + meshname + '.fbx'\n        pm.select(x)\n        pm.other.FBXExport('-f', _des_path, '-s')\n        FBXAddress.append(_des_path)\n    return FBXAddress\n\n#Create GUI\nfrom PySide2 import QtCore, QtGui, QtWidgets\nfrom PySide2.QtWidgets import QWidget, QPushButton, QApplication\n\nclass Ui_Dialog(object):\n    def setupUi(self, Dialog):\n        Dialog.setObjectName(\"Dialog\")\n        Dialog.resize(464, 77)\n        Dialog.setProperty(\"Pushit\", False)\n        self.verticalLayoutWidget = QtWidgets.QWidget(Dialog)\n        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 441, 51))\n        self.verticalLayoutWidget.setObjectName(\"verticalLayoutWidget\")\n        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)\n        self.verticalLayout.setContentsMargins(0, 0, 0, 0)\n        self.verticalLayout.setObjectName(\"verticalLayout\")\n        self.horizontalLayout = QtWidgets.QHBoxLayout()\n        self.horizontalLayout.setObjectName(\"horizontalLayout\")\n        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)\n        self.label.setObjectName(\"label\")\n        self.horizontalLayout.addWidget(self.label)\n        self.lineEdit = QtWidgets.QLineEdit(self.verticalLayoutWidget)\n        self.lineEdit.setObjectName(\"lineEdit\")\n        self.horizontalLayout.addWidget(self.lineEdit)\n        self.pushButton = QtWidgets.QPushButton(self.verticalLayoutWidget)\n        self.pushButton.setCheckable(False)\n        self.pushButton.setAutoDefault(False)\n        self.pushButton.setDefault(False)\n        self.pushButton.setObjectName(\"pushButton\")\n        self.horizontalLayout.addWidget(self.pushButton)\n        self.pushButton.clicked.connect(self.ClickedEvent)\n        self.verticalLayout.addLayout(self.horizontalLayout)\n        self.label_2 = QtWidgets.QLabel(self.verticalLayoutWidget)\n        self.label_2.setObjectName(\"label_2\")\n        self.verticalLayout.addWidget(self.label_2)\n\n        self.retranslateUi(Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n\n    def retranslateUi(self, Dialog):\n        Dialog.setWindowTitle(QtWidgets.QApplication.translate(\"Dialog\", \"EGC_ExportFBX\", None, -1))\n        self.label.setText(QtWidgets.QApplication.translate(\"Dialog\", \"ExportFBX_Path:\", None, -1))\n        self.lineEdit.setText(QtWidgets.QApplication.translate(\"Dialog\", DefaultPath, None, -1))\n        self.pushButton.setText(QtWidgets.QApplication.translate(\"Dialog\", \"Export\", None, -1))\n        self.label_2.setText(QtWidgets.QApplication.translate(\"Dialog\", 'Status: Ready to export', None, -1))\n\n    def ClickedEvent(self):\n        Des_path = self.lineEdit.displayText()\n        if pm.selected() == []:\n            self.label_2.setStyleSheet(\"color:red\")\n            self.label_2.setText('Status: Please choose mesh first')\n        elif os.path.exists(Des_path) == False:\n            os.makedirs(Des_path)\n        else:\n            configini = \"D:\\\\EGC_Plugins\\\\EGC_configs.py\"\n            out_file = open(configini, 'w')\n            yourFile = ExecuteExport(Des_path)\n            self.label_2.setStyleSheet(\"color:green\")\n            self.label_2.setText('Success %s' % yourFile)\n            out_file.write('MaxMayaToUnreal = True')\n            out_file.write(\"\\nExportedAddressFile = %s\" % yourFile)\n            out_file.close()\n            cmd = 'Main_Folder\\\\Engine\\\\Binaries\\\\Win64\\\\UE4Editor-Cmd.exe \\\"Main_Folder\\\\FortniteGame\\\\ForEGC\\\\EGC_Export.uproject\\\" -run=pythonscript -script=\\\"D:\\\\EGC_Plugins\\\\EGC_AutoImEx.py\\\"'\n            os.system(cmd)\n            \nif __name__ == '__main__':\n    MainWindow = QtWidgets.QMainWindow()\n    MainWindow.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)\n    ui = Ui_Dialog()\n    ui.setupUi(MainWindow)\n    MainWindow.show()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;

} 
